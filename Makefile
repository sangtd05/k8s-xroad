# X-Road Docker Deployment Makefile
# S·ª≠ d·ª•ng: make <target>

.PHONY: help start stop restart status logs clean backup restore init ssl setup-remote

# Default target
help: ## Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh c√≥ s·∫µn
	@echo "X-Road Docker Deployment Commands:"
	@echo "=================================="
	@echo ""
	@echo "üöÄ Kh·ªüi ƒë·ªông h·ªá th·ªëng:"
	@echo "  start          Kh·ªüi ƒë·ªông h·ªá th·ªëng X-Road"
	@echo "  start-init     Kh·ªüi ƒë·ªông v√† kh·ªüi t·∫°o h·ªá th·ªëng"
	@echo "  start-ssl      Kh·ªüi ƒë·ªông v·ªõi SSL certificate m·ªõi"
	@echo ""
	@echo "üõë D·ª´ng h·ªá th·ªëng:"
	@echo "  stop           D·ª´ng h·ªá th·ªëng"
	@echo "  stop-clean     D·ª´ng v√† d·ªçn d·∫πp ho√†n to√†n"
	@echo ""
	@echo "üîÑ Qu·∫£n l√Ω h·ªá th·ªëng:"
	@echo "  restart        Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng"
	@echo "  restart-clean  Kh·ªüi ƒë·ªông l·∫°i v·ªõi d·ªçn d·∫πp"
	@echo "  restart-init   Kh·ªüi ƒë·ªông l·∫°i v√† kh·ªüi t·∫°o"
	@echo ""
	@echo "üìä Ki·ªÉm tra tr·∫°ng th√°i:"
	@echo "  status         Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng"
	@echo "  status-detailed Ki·ªÉm tra tr·∫°ng th√°i chi ti·∫øt"
	@echo "  logs           Xem logs h·ªá th·ªëng"
	@echo "  logs-service   Xem logs c·ªßa service c·ª• th·ªÉ"
	@echo ""
	@echo "üîß C·∫•u h√¨nh:"
	@echo "  init           Kh·ªüi t·∫°o h·ªá th·ªëng"
	@echo "  ssl            T·∫°o SSL certificate"
	@echo "  setup-remote   C·∫•u h√¨nh Security Server t·ª´ xa"
	@echo ""
	@echo "üíæ Backup & Restore:"
	@echo "  backup         T·∫°o backup h·ªá th·ªëng"
	@echo "  backup-list    Li·ªát k√™ c√°c backup"
	@echo "  restore        Restore backup (c·∫ßn ch·ªâ ƒë·ªãnh BACKUP_NAME)"
	@echo ""
	@echo "üßπ D·ªçn d·∫πp:"
	@echo "  clean          D·ªçn d·∫πp h·ªá th·ªëng"
	@echo "  clean-all      D·ªçn d·∫πp ho√†n to√†n (c·∫£ images)"
	@echo ""
	@echo "üìö V√≠ d·ª• s·ª≠ d·ª•ng:"
	@echo "  make start-init"
	@echo "  make status-detailed"
	@echo "  make logs-service SERVICE=centralserver"
	@echo "  make restore BACKUP_NAME=xroad-backup-20241228-120000"

# Kh·ªüi ƒë·ªông h·ªá th·ªëng
start: ## Kh·ªüi ƒë·ªông h·ªá th·ªëng X-Road
	@echo "üöÄ Kh·ªüi ƒë·ªông h·ªá th·ªëng X-Road..."
	@./scripts/start.sh

start-init: ## Kh·ªüi ƒë·ªông v√† kh·ªüi t·∫°o h·ªá th·ªëng
	@echo "üöÄ Kh·ªüi ƒë·ªông v√† kh·ªüi t·∫°o h·ªá th·ªëng X-Road..."
	@./scripts/start.sh --init

start-ssl: ## Kh·ªüi ƒë·ªông v·ªõi SSL certificate m·ªõi
	@echo "üöÄ Kh·ªüi ƒë·ªông v·ªõi SSL certificate m·ªõi..."
	@./scripts/start.sh --ssl

# D·ª´ng h·ªá th·ªëng
stop: ## D·ª´ng h·ªá th·ªëng
	@echo "üõë D·ª´ng h·ªá th·ªëng X-Road..."
	@./scripts/stop.sh

stop-clean: ## D·ª´ng v√† d·ªçn d·∫πp ho√†n to√†n
	@echo "üõë D·ª´ng v√† d·ªçn d·∫πp h·ªá th·ªëng X-Road..."
	@./scripts/stop.sh --clean

# Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng
restart: ## Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng
	@echo "üîÑ Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng X-Road..."
	@./scripts/start.sh --restart

restart-clean: ## Kh·ªüi ƒë·ªông l·∫°i v·ªõi d·ªçn d·∫πp
	@echo "üîÑ Kh·ªüi ƒë·ªông l·∫°i v·ªõi d·ªçn d·∫πp h·ªá th·ªëng X-Road..."
	@./scripts/start.sh --restart-clean

restart-init: ## Kh·ªüi ƒë·ªông l·∫°i v√† kh·ªüi t·∫°o
	@echo "üîÑ Kh·ªüi ƒë·ªông l·∫°i v√† kh·ªüi t·∫°o h·ªá th·ªëng X-Road..."
	@./scripts/start.sh --restart-init

# Ki·ªÉm tra tr·∫°ng th√°i
status: ## Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng
	@echo "üìä Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng X-Road..."
	@./scripts/status.sh

status-detailed: ## Ki·ªÉm tra tr·∫°ng th√°i chi ti·∫øt
	@echo "üìä Ki·ªÉm tra tr·∫°ng th√°i chi ti·∫øt h·ªá th·ªëng X-Road..."
	@./scripts/status.sh --detailed

logs: ## Xem logs h·ªá th·ªëng
	@echo "üìã Xem logs h·ªá th·ªëng X-Road..."
	@./scripts/status.sh --logs

logs-service: ## Xem logs c·ªßa service c·ª• th·ªÉ (SERVICE=service_name)
	@echo "üìã Xem logs c·ªßa service $(SERVICE)..."
	@./scripts/status.sh --logs --service $(SERVICE)

# C·∫•u h√¨nh
init: ## Kh·ªüi t·∫°o h·ªá th·ªëng
	@echo "üîß Kh·ªüi t·∫°o h·ªá th·ªëng X-Road..."
	@./scripts/start.sh --init

ssl: ## T·∫°o SSL certificate
	@echo "üîê T·∫°o SSL certificate..."
	@./scripts/start.sh --ssl

setup-remote: ## C·∫•u h√¨nh Security Server t·ª´ xa
	@echo "üåê C·∫•u h√¨nh Security Server t·ª´ xa..."
	@./scripts/setup-remote-ss.sh

# Backup & Restore
backup: ## T·∫°o backup h·ªá th·ªëng
	@echo "üíæ T·∫°o backup h·ªá th·ªëng X-Road..."
	@./scripts/backup.sh

backup-list: ## Li·ªát k√™ c√°c backup
	@echo "üìã Li·ªát k√™ c√°c backup..."
	@./scripts/backup.sh --list

restore: ## Restore backup (c·∫ßn ch·ªâ ƒë·ªãnh BACKUP_NAME)
	@echo "üîÑ Restore backup $(BACKUP_NAME)..."
	@./scripts/backup.sh --restore $(BACKUP_NAME)

# D·ªçn d·∫πp
clean: ## D·ªçn d·∫πp h·ªá th·ªëng
	@echo "üßπ D·ªçn d·∫πp h·ªá th·ªëng X-Road..."
	@if command -v docker-compose &> /dev/null; then docker-compose down -v --remove-orphans; else docker compose down -v --remove-orphans; fi
	@docker system prune -f

clean-all: ## D·ªçn d·∫πp ho√†n to√†n (c·∫£ images)
	@echo "üßπ D·ªçn d·∫πp ho√†n to√†n h·ªá th·ªëng X-Road..."
	@if command -v docker-compose &> /dev/null; then docker-compose down -v --remove-orphans; else docker compose down -v --remove-orphans; fi
	@docker system prune -a -f
	@docker volume prune -f

# C√†i ƒë·∫∑t
install: ## C√†i ƒë·∫∑t h·ªá th·ªëng (t·∫°o .env, build images, SSL, kh·ªüi ƒë·ªông)
	@echo "‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng X-Road..."
	@cp config.env .env
	@make build
	@make ssl
	@make start-init

build: ## Build Docker images t·ª´ th∆∞ m·ª•c Docker
	@echo "üî® Building Docker images..."
	@./scripts/build-images.sh

# Ki·ªÉm tra
check: ## Ki·ªÉm tra c·∫•u h√¨nh v√† prerequisites
	@echo "‚úÖ Ki·ªÉm tra c·∫•u h√¨nh v√† prerequisites..."
	@docker --version
	@if command -v docker-compose &> /dev/null; then docker-compose --version; else docker compose version; fi
	@if [ ! -f ".env" ]; then echo "‚ùå File .env kh√¥ng t·ªìn t·∫°i"; exit 1; fi
	@if [ ! -f "docker-compose.yml" ]; then echo "‚ùå File docker-compose.yml kh√¥ng t·ªìn t·∫°i"; exit 1; fi
	@echo "‚úÖ T·∫•t c·∫£ prerequisites ƒë√£ s·∫µn s√†ng"

# C·∫≠p nh·∫≠t
update: ## C·∫≠p nh·∫≠t images v√† kh·ªüi ƒë·ªông l·∫°i
	@echo "üîÑ C·∫≠p nh·∫≠t images v√† kh·ªüi ƒë·ªông l·∫°i..."
	@echo "‚ö†Ô∏è  L∆∞u √Ω: H·ªá th·ªëng s·ª≠ d·ª•ng images local, kh√¥ng pull t·ª´ registry"
	@make restart

# Test
test: ## Ch·∫°y test k·∫øt n·ªëi
	@echo "üß™ Ch·∫°y test k·∫øt n·ªëi..."
	@curl -s -f -k https://localhost:4000 > /dev/null && echo "‚úÖ Central Server: OK" || echo "‚ùå Central Server: FAILED"
	@curl -s -f -k https://localhost:4001 > /dev/null && echo "‚úÖ Security Server: OK" || echo "‚ùå Security Server: FAILED"
	@curl -s -f -k http://localhost:8888/testca/certs > /dev/null && echo "‚úÖ Test CA: OK" || echo "‚ùå Test CA: FAILED"

# Hi·ªÉn th·ªã th√¥ng tin
info: ## Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
	@echo "‚ÑπÔ∏è Th√¥ng tin h·ªá th·ªëng X-Road:"
	@echo "=============================="
	@echo "üåê Web Interfaces:"
	@echo "  ‚Ä¢ Central Server:     https://localhost:4000"
	@echo "  ‚Ä¢ Security Server:    https://localhost:4001"
	@echo "  ‚Ä¢ Test CA:            https://localhost:8888"
	@echo "  ‚Ä¢ Mailpit:            https://localhost:8025"
	@echo ""
	@echo "üîå API Endpoints:"
	@echo "  ‚Ä¢ REST API:           http://localhost:8082"
	@echo "  ‚Ä¢ SOAP API:           http://localhost:8083"
	@echo "  ‚Ä¢ OpenAPI:            http://localhost:8084"
	@echo ""
	@echo "üîê Default Credentials:"
	@echo "  ‚Ä¢ Username: xrd"
	@echo "  ‚Ä¢ Password: secret"
	@echo ""
	@echo "üìù Useful Commands:"
	@echo "  ‚Ä¢ View logs:          make logs"
	@echo "  ‚Ä¢ Check status:       make status"
	@echo "  ‚Ä¢ Stop system:        make stop"
	@echo "  ‚Ä¢ Restart system:     make restart"
