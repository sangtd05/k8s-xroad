#!/bin/bash

# Script kh·ªüi ƒë·ªông h·ªá th·ªëng X-Road
# Usage: ./scripts/start.sh [--init] [--ssl]

set -e

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Bi·∫øn m√¥i tr∆∞·ªùng
ENV_FILE=".env"
COMPOSE_FILE="docker-compose.yml"
SSL_DIR="nginx/ssl"
CERT_FILE="$SSL_DIR/cert.pem"
KEY_FILE="$SSL_DIR/key.pem"

# H√†m in th√¥ng b√°o
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# H√†m ki·ªÉm tra prerequisites
check_prerequisites() {
    print_info "Ki·ªÉm tra prerequisites..."
    
    # Ki·ªÉm tra Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng c√≥ trong PATH"
        exit 1
    fi
    
    # Ki·ªÉm tra Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        exit 1
    fi
    
    # Ki·ªÉm tra file .env
    if [ ! -f "$ENV_FILE" ]; then
        print_warning "File .env kh√¥ng t·ªìn t·∫°i, t·∫°o t·ª´ env.example..."
        if [ -f "env.example" ]; then
            cp env.example .env
            print_success "ƒê√£ t·∫°o file .env t·ª´ env.example"
        else
            print_error "File env.example kh√¥ng t·ªìn t·∫°i"
            exit 1
        fi
    fi
    
    print_success "Prerequisites OK"
}

# H√†m t·∫°o SSL certificate
generate_ssl() {
    print_info "T·∫°o SSL certificate..."
    
    if [ ! -f "$CERT_FILE" ] || [ ! -f "$KEY_FILE" ]; then
        print_info "Ch·ª©ng ch·ªâ SSL kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi..."
        
        # T·∫°o th∆∞ m·ª•c SSL
        mkdir -p "$SSL_DIR"
        
        # T·∫°o private key
        openssl genrsa -out "$KEY_FILE" 2048
        
        # T·∫°o certificate signing request
        openssl req -new -key "$KEY_FILE" -out "$SSL_DIR/cert.csr" \
            -subj "/C=VN/ST=Hanoi/L=Hanoi/O=X-Road/OU=IT/CN=xroad.localhost"
        
        # T·∫°o self-signed certificate
        openssl x509 -req -days 365 -in "$SSL_DIR/cert.csr" \
            -signkey "$KEY_FILE" -out "$CERT_FILE"
        
        # X√≥a file CSR
        rm "$SSL_DIR/cert.csr"
        
        # ƒê·∫∑t quy·ªÅn
        chmod 600 "$KEY_FILE"
        chmod 644 "$CERT_FILE"
        
        print_success "SSL certificate ƒë√£ ƒë∆∞·ª£c t·∫°o"
    else
        print_info "SSL certificate ƒë√£ t·ªìn t·∫°i"
    fi
}

# H√†m kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng
restart_system() {
    local init_mode=$1
    local clean_mode=$2
    
    print_info "B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng X-Road..."
    
    # D·ª´ng h·ªá th·ªëng
    print_info "D·ª´ng h·ªá th·ªëng hi·ªán t·∫°i..."
    if [ "$clean_mode" = true ]; then
        ./scripts/stop.sh --clean
    else
        ./scripts/stop.sh
    fi
    
    # Ch·ªù m·ªôt ch√∫t
    print_info "Ch·ªù 5 gi√¢y..."
    sleep 5
    
    # Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng
    print_info "Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng..."
    if [ "$init_mode" = true ]; then
        ./scripts/start.sh --init
    else
        ./scripts/start.sh
    fi
    
    print_success "H·ªá th·ªëng X-Road ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i th√†nh c√¥ng!"
}

# H√†m kh·ªüi ƒë·ªông services
start_services() {
    print_info "Kh·ªüi ƒë·ªông c√°c services..."
    
    # Pull images
    print_info "T·∫£i Docker images..."
    docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" pull
    
    # Start services
    print_info "Kh·ªüi ƒë·ªông containers..."
    docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d
    
    print_success "C√°c services ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông"
}

# H√†m kh·ªüi t·∫°o h·ªá th·ªëng
initialize_system() {
    print_info "Kh·ªüi t·∫°o h·ªá th·ªëng X-Road..."
    
    # Ch·ªù c√°c services kh·ªüi ƒë·ªông
    print_info "Ch·ªù c√°c services kh·ªüi ƒë·ªông ho√†n t·∫•t..."
    sleep 30
    
    # Ki·ªÉm tra health c·ªßa c√°c services
    print_info "Ki·ªÉm tra tr·∫°ng th√°i c√°c services..."
    
    # Central Server
    if docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" ps cs | grep -q "Up"; then
        print_success "Central Server: Running"
    else
        print_error "Central Server: Failed"
    fi
    
    # Security Server
    if docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" ps ss0 | grep -q "Up"; then
        print_success "Security Server: Running"
    else
        print_error "Security Server: Failed"
    fi
    
    # Test CA
    if docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" ps testca | grep -q "Up"; then
        print_success "Test CA: Running"
    else
        print_error "Test CA: Failed"
    fi
    
    print_success "H·ªá th·ªëng X-Road ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o"
}

# H√†m hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p
show_access_info() {
    print_info "Th√¥ng tin truy c·∫≠p h·ªá th·ªëng:"
    echo ""
    echo "üåê Web Interfaces:"
    echo "  ‚Ä¢ Central Server:     https://localhost:4000"
    echo "  ‚Ä¢ Security Server:    https://localhost:4001"
    echo "  ‚Ä¢ Test CA:            https://localhost:8888"
    echo "  ‚Ä¢ Mailpit:            https://localhost:8025"
    echo ""
    echo "üîå API Endpoints:"
    echo "  ‚Ä¢ REST API:           http://localhost:8082"
    echo "  ‚Ä¢ SOAP API:           http://localhost:8083"
    echo "  ‚Ä¢ OpenAPI:            http://localhost:8084"
    echo ""
    echo "üîê Default Credentials:"
    echo "  ‚Ä¢ Username: xrd"
    echo "  ‚Ä¢ Password: secret"
    echo ""
    echo "üìù Logs:"
    echo "  ‚Ä¢ View logs:          docker-compose logs -f"
    echo "  ‚Ä¢ Stop system:        ./scripts/stop.sh"
    echo "  ‚Ä¢ Restart system:     ./scripts/restart.sh"
    echo ""
    print_warning "L∆∞u √Ω: ƒê√¢y l√† ch·ª©ng ch·ªâ SSL t·ª± k√Ω, tr√¨nh duy·ªát s·∫Ω c·∫£nh b√°o b·∫£o m·∫≠t."
}

# Main function
main() {
    local init_mode=false
    local ssl_mode=false
    local restart_mode=false
    local clean_mode=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --init)
                init_mode=true
                shift
                ;;
            --ssl)
                ssl_mode=true
                shift
                ;;
            --restart)
                restart_mode=true
                shift
                ;;
            --restart-init)
                restart_mode=true
                init_mode=true
                shift
                ;;
            --restart-clean)
                restart_mode=true
                clean_mode=true
                shift
                ;;
            -h|--help)
                echo "Usage: $0 [--init] [--ssl] [--restart] [--restart-init] [--restart-clean]"
                echo "  --init           Kh·ªüi t·∫°o h·ªá th·ªëng sau khi kh·ªüi ƒë·ªông"
                echo "  --ssl            T·∫°o SSL certificate m·ªõi"
                echo "  --restart        Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng"
                echo "  --restart-init   Kh·ªüi ƒë·ªông l·∫°i v√† kh·ªüi t·∫°o"
                echo "  --restart-clean  Kh·ªüi ƒë·ªông l·∫°i v·ªõi d·ªçn d·∫πp"
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # X·ª≠ l√Ω restart mode
    if [ "$restart_mode" = true ]; then
        restart_system "$init_mode" "$clean_mode"
        return 0
    fi
    
    print_info "B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông h·ªá th·ªëng X-Road..."
    
    # Ki·ªÉm tra prerequisites
    check_prerequisites
    
    # T·∫°o SSL certificate n·∫øu c·∫ßn
    if [ "$ssl_mode" = true ]; then
        generate_ssl
    fi
    
    # Kh·ªüi ƒë·ªông services
    start_services
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng n·∫øu c·∫ßn
    if [ "$init_mode" = true ]; then
        initialize_system
    fi
    
    # Hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p
    show_access_info
    
    print_success "H·ªá th·ªëng X-Road ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng!"
}

# Ch·∫°y main function
main "$@"
